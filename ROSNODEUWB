#!/usr/bin/env python

import rospy
import time
import serial
import random
from geometry_msgs.msg import Pose
from geometry_msgs.msg import PoseStamped
from std_msgs.msg import Float64
from dwm1001_apiCommands import DWM1001_API_COMMANDS

class DWM1001Localizer:

    def __init__(self):
        rospy.init_node('DWM1001_Active_{}'.format(random.randint(0, 100000)), anonymous=False)

        self.dwm_port = rospy.get_param('~port')
        self.tag_name = rospy.get_param('~tag_name')
        self.use_network = rospy.get_param('~use_network', False)
        self.network = rospy.get_param('~network', "default")
        self.verbose = rospy.get_param('~verbose', False)
        self.rate = rospy.Rate(1)
        self.topics = {}

        self.serialPortDWM1001 = serial.Serial(
            port=self.dwm_port,
            baudrate=115200,
            parity=serial.PARITY_ODD,
            stopbits=serial.STOPBITS_TWO,
            bytesize=serial.SEVENBITS
        )

    def main(self):
        self.serialPortDWM1001.close()
        time.sleep(1)
        self.serialPortDWM1001.open()

        if self.serialPortDWM1001.isOpen():
            rospy.loginfo("Port opened: " + str(self.serialPortDWM1001.name))
            self.initializeDWM1001API()
            time.sleep(2)
            self.serialPortDWM1001.write(DWM1001_API_COMMANDS.LEC)
            self.serialPortDWM1001.write(DWM1001_API_COMMANDS.SINGLE_ENTER)
            rospy.loginfo("Reading DWM1001 coordinates")
        else:
            rospy.loginfo("Can't open port: " + str(self.serialPortDWM1001.name))

        try:
            while not rospy.is_shutdown():
                serialReadLine = self.serialPortDWM1001.read_until()
                try:
                    self.publishTagPositions(serialReadLine)
                except IndexError:
                    rospy.loginfo("Found index error in the network array! DO SOMETHING!")

        except KeyboardInterrupt:
            rospy.loginfo("Quitting DWM1001 Shell Mode and closing port, allow 1 second for UWB recovery")
            self.serialPortDWM1001.write(DWM1001_API_COMMANDS.RESET)
            self.serialPortDWM1001.write(DWM1001_API_COMMANDS.SINGLE_ENTER)

        finally:
            rospy.loginfo("Quitting, and sending reset command to dev board")
            self.serialPortDWM1001.write(DWM1001_API_COMMANDS.RESET)
            self.serialPortDWM1001.write(DWM1001_API_COMMANDS.SINGLE_ENTER)
            self.rate.sleep()
            serialReadLine = self.serialPortDWM1001.read_until()
            if "reset" in serialReadLine:
                rospy.loginfo("Succesfully closed")
                self.serialPortDWM1001.close()

    def publishTagPositions(self, serialData):
        arrayData = [x.strip() for x in serialData.strip().split(',')]

        if "DIST" in arrayData[0]:
            number_of_anchors = (len(arrayData) - 7) / 6
            for i in range(number_of_anchors):
                node_id = arrayData[2 + 6 * i]
                first_time = False
                if node_id not in self.topics:
                    first_time = True
                    self.topics[node_id] = rospy.Publisher(
                        '/dwm1001' +
                        "{}".format("/" + self.network if self.use_network else "") +
                        '/anchor/' + node_id +
                        "/position",
                        PoseStamped,
                        queue_size=100
                    )
                    self.topics[node_id + "_dist"] = rospy.Publisher(
                        '/dwm1001' +
                        "{}".format("/" + self.network if self.use_network else "") +
                        '/tag/' + self.tag_name +
                        '/to/anchor/' + node_id +
                        "/distance",
                        Float64,
                        queue_size=100
                    )
                try:
                    p = PoseStamped()
                    p.header.stamp = rospy.Time.now()
                    p.pose.position.x = float(arrayData[4 + 6 * i])
                    p.pose.position.y = float(arrayData[5 + 6 * i])
                    p.pose.position.z = float(arrayData[6 + 6 * i])
                    p.pose.orientation.x = 0.0
                    p.pose.orientation.y = 0.0
                    p.pose.orientation.z = 0.0
                    p.pose.orientation.w = 1.0
                    self.topics[node_id].publish(p)
                except:
                    pass
                try:
                    dist = float(arrayData[7 + 6 * i])
                    self.topics[node_id + "_dist"].publish(dist)
                except:
                    pass
                if self.verbose or first_time:
                    rospy.loginfo("Anchor " + node_id + ": "
                                  + " x: "
                                  + str(p.pose.position.x)
                                  + " y: "
                                  + str(p.pose.position.y)
                                  + " z: "
                                  + str(p.pose.position.z))

            if "POS" in arrayData[-5]:
                first_time = False
                if self.tag_name not in self.topics:
                    first_time = True
                    self.topics[self.tag_name] = rospy.Publisher('/dwm1001/tag/' + self.tag_name + "/position",
                                                                PoseStamped, queue_size=100)
                p = PoseStamped()
                p.header.stamp = rospy.Time.now()
                p.pose.position.x = float(arrayData[-4])
                p.pose.position.y = float(arrayData[-3])
                p.pose.position.z = float(arrayData[-2])
                p.pose.orientation.x = 0.0
                p.pose.orientation.y = 0.0
                p.pose.orientation.z = 0.0
                p.pose.orientation.w = 1.0
                self.topics[self.tag_name].publish(p)
                if self.verbose or first_time:
                    rospy.loginfo("Tag " + self.tag_name + ": "
                                  + " x: "
                                  + str(p.pose.position.x)
                                  + " y: "
                                  + str(p.pose.position.y)
                                  + " z: "
                                  + str(p.pose.position.z))

    def initializeDWM1001API(self):
        self.serialPortDWM1001.write(DWM1001_API_COMMANDS.RESET)
        self.serialPortDWM1001.write(DWM1001_API_COMMANDS.SINGLE_ENTER)
        time.sleep(0.5)
        self.serialPortDWM1001.write(DWM1001_API_COMMANDS.SINGLE_ENTER)
        time.sleep(0.5)
        self.serialPortDWM1001.write(DWM1001_API_COMMANDS.SINGLE_ENTER)

if __name__ == '__main__':
    try:
        dwm1001 = DWM1001Localizer()
        dwm1001.main()
    except rospy.ROSInterruptException:
        pass
